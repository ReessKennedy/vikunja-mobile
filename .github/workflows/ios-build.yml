name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.2'  # Use modern Flutter with Dart 3.3.0+
        channel: stable
        cache: false  # Disable cache to avoid conflicts
        
    - name: Update Flutter version constraint
      run: |
        # Update pubspec.yaml to use modern Flutter
        sed -i '' 's/flutter: ">=3.16.0"/flutter: ">=3.22.0"/' pubspec.yaml
        
    - name: Restore modern dependencies
      run: |
        # Restore modern package versions
        sed -i '' 's/http: \^1.2.0/http: ^1.2.1/' pubspec.yaml
        sed -i '' 's/intl: \^0.18.1.*/intl: ^0.20.2/' pubspec.yaml
        
    - name: Flutter doctor
      run: flutter doctor -v
        
    - name: Clean everything
      run: |
        flutter clean
        rm -rf ~/.pub-cache
        rm -rf ios/Pods
        rm -rf ios/Podfile.lock
        rm -rf ios/.symlinks
        rm -rf ios/Flutter/Flutter.framework
        rm -rf ios/Flutter/Flutter.podspec
        
    - name: Install dependencies
      run: |
        flutter pub get
        flutter pub deps
        
    - name: Clean and prepare iOS dependencies  
      run: |
        cd ios
        pod cache clean --all
        pod repo remove trunk || true
        pod setup
        
    - name: Try installing with different CocoaPods strategies
      run: |
        cd ios
        echo "Trying pod install with repo update..."
        pod install --repo-update --verbose || {
          echo "Failed. Trying without repo update..."
          pod install --verbose || {
            echo "Failed. Trying with --allow-root..."
            pod install --allow-root --verbose || {
              echo "Failed. Trying legacy resolver..."
              pod install --verbose --deployment || {
                echo "All strategies failed. Showing detailed error info..."
                pod --version
                pod repo list
                cat Podfile
                exit 1
              }
            }
          }
        }
        
    - name: Build iOS (without code signing)
      run: |
        echo "🚀 Starting iOS build..."
        flutter build ios --release --no-codesign --verbose 2>&1 | tee ios_build.log || {
          echo "❌ iOS build failed. Showing detailed error information..."
          echo "📋 Last 100 lines of build log:"
          tail -100 ios_build.log
          echo "🔍 Searching for specific error patterns..."
          echo "📱 Swift errors:"
          grep -i "swift.*error" ios_build.log || echo "No Swift errors found"
          echo "📱 Xcode errors:" 
          grep -i "error.*xcode" ios_build.log || echo "No Xcode errors found"
          echo "📱 Compilation errors:"
          grep -i "compilation.*failed\|error:" ios_build.log | head -20 || echo "No compilation errors found"
          echo "📱 Build summary:"
          grep -i "error.*count\|warning.*count" ios_build.log || echo "No error counts found"
          exit 1
        }
        echo "✅ iOS build completed successfully!"
        
    - name: Find and create unsigned IPA
      run: |
        echo "🔍 Looking for iOS build output..."
        find build -name "*.app" -type d | head -10
        
        echo "📱 Finding Runner.app location..."
        APP_PATH=$(find build -name "Runner.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "❌ Could not find Runner.app"
          echo "📋 Available build outputs:"
          ls -la build/ || echo "No build directory"
          find build -type d -name "*ios*" || echo "No iOS directories found"
          exit 1
        fi
        
        echo "✅ Found Runner.app at: $APP_PATH"
        
        # Create IPA in the same directory as the app
        APP_DIR=$(dirname "$APP_PATH")
        cd "$APP_DIR"
        
        # Check app contents before zipping
        echo "📋 Checking Runner.app contents..."
        ls -la "$(basename "$APP_PATH")"
        echo "📋 App size:"
        du -sh "$(basename "$APP_PATH")"
        
        mkdir -p Payload
        cp -r "$(basename "$APP_PATH")" Payload/
        
        # Verify copy worked
        echo "📋 Payload contents after copy:"
        ls -la Payload/
        echo "📋 Payload size:"
        du -sh Payload/
        
        # Create IPA with verbose output and ensure all files are included
        echo "📦 Creating IPA..."
        zip -r -v app-unsigned.ipa Payload/
        
        echo "✅ Created IPA at: $APP_DIR/app-unsigned.ipa"
        ls -la app-unsigned.ipa
        
        # Verify IPA contents
        echo "📋 IPA file info:"
        file app-unsigned.ipa
        echo "📋 IPA contents:"
        unzip -l app-unsigned.ipa | head -20
        
    - name: Prepare IPA for upload
      run: |
        # Find the IPA file
        IPA_PATH=$(find build -name "app-unsigned.ipa" | head -1)
        echo "📱 IPA location: $IPA_PATH"
        
        # Copy to expected location for upload
        mkdir -p artifacts
        cp "$IPA_PATH" artifacts/app-unsigned.ipa
        
    - name: Upload IPA to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-unsigned-ipa
        path: artifacts/app-unsigned.ipa
        retention-days: 30
        
    - name: Build info
      run: |
        echo "✅ iOS build completed successfully!"
        echo "📱 Download the unsigned IPA from the Actions artifacts"
        echo "ℹ️  To install: You'll need to sign this IPA with your Apple ID using tools like:"
        echo "   - Xcode (if you have it)"
        echo "   - AltStore"
        echo "   - Sideloadly"
        echo "   - Or set up proper code signing in this workflow" 